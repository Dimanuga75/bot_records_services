const {
  Telegraf,
  Markup,
  Extra,
  Context,
  Scenes: { WizardScene, Stage, BaseScene },
  session,
  Scenes,
} = require("telegraf");

require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const startScene = new Scenes.BaseScene("startScene");
const black = new Scenes.BaseScene("black");
const removeChoice = new Scenes.BaseScene("removeChoice");
const recordClient = new Scenes.BaseScene("recordClient");
const nameClientSce = new Scenes.BaseScene("nameClientSce");
const removeChoiceAdmin = new Scenes.BaseScene("removeChoiceAdmin");
const stage = new Stage([
  startScene,
  black,
  removeChoice,
  recordClient,
  nameClientSce,
  removeChoiceAdmin,
]);

bot.use(Telegraf.log());
let adminMenu = ["–ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞"];
bot.use(session());
bot.use(stage.middleware());
bot.hears("/start", Stage.enter("startScene"));
bot.hears("/777", Stage.enter("black"));
bot.hears("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", Stage.enter("removeChoice"));
bot.hears("–∑–∞–ø–∏—Å—å", Stage.enter("recordClient"));
bot.hears("—Å—Ç–∞—Ä—Ç", Stage.enter("recordClient"));
bot.hears("1", Stage.enter("recordClient"));
bot.hears("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞", Stage.enter("nameClientSce"));
bot.hears("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", Stage.enter("recordClient"));
bot.hears("/555", (ctx) =>
  ctx.reply(
    "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º",
    Markup.keyboard(adminMenu).oneTime().resize()
  )
);
bot.hears("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞", Stage.enter("removeChoiceAdmin"));

//bot.help((ctx) => ctx.reply("Send me a sticker"));
//bot.on("sticker", (ctx) => ctx.reply("üëç"));
//bot.hears("hi", (ctx) => ctx.reply("Heloooooo"));
bot.launch();

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));

const { google } = require("googleapis");
const keys = require("./keys.json");
const idSheets = process.env.ID_SHEETS;
const client = new google.auth.JWT(keys.client_email, null, keys.private_key, [
  "https://www.googleapis.com/auth/spreadsheets",
]);

client.authorize(function (err, tokens) {
  if (err) {
    console.log(err);
    return;
  } else {
    console.log("Connected");
    gsrun(client);
  }
});

async function gsrun(cl) {
  try {
    const gsapi = google.sheets({ version: "v4", auth: cl });
    let metaData = await gsapi.spreadsheets.get({
      spreadsheetId: idSheets,
    });
    //  console.log(metaData.data.sheets.title);
    //  –°–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ (–º–∞—Å—Ç–µ—Ä–æ–≤)
    function sheetnames() {
      let listSheet = new Array();
      let sheets = metaData.data.sheets;
      for (let i = 2; i < sheets.length; i++)
        listSheet.push(metaData.data.sheets[i].properties.title);
      return listSheet;
    }
    const listSheets = sheetnames();
    //–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤
    function sheetSetting() {
      let listSetting = new Array();
      for (i = 0; i < 2; i++)
        listSetting.push(metaData.data.sheets[i].properties.title);
      return listSetting;
    }
    const listSettings = sheetSetting();

    //–ù–∞—à–∏ —É—Å–ª—É–≥–∏
    let serviceListArr = await gsapi.spreadsheets.values.get({
      spreadsheetId: idSheets,
      range: `${listSettings[1]}!A2:A`,
    });
    let serviceList = serviceListArr.data.values.flat();

    //  –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π  –Ω–∞ –¥–µ–Ω—å (–ø–æ 1-–º—É –ª–µ–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É)
    let numberRecordsArr = await gsapi.spreadsheets.values.get({
      spreadsheetId: idSheets,
      range: `${listSheets[0]}!A4:A`,
    });
    let numberRecords = numberRecordsArr.data.values.length;

    //  –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    let timeArray = numberRecordsArr.data.values.flat();

    //  –ú–∞—Å—Å–∏–≤ –¥–∞—Ç —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª—è–º–∏
    let dateSheetsArr = await gsapi.spreadsheets.values.get({
      spreadsheetId: idSheets,
      range: `${listSheets[0]}!3:3`,
    });
    let dateSheets = dateSheetsArr.data.values.flat();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
    let dataSheets = await gsapi.spreadsheets.values.get({
      spreadsheetId: idSheets,
      range: `${listSheets[0]}!2:2`,
    });
    let dateArr = dataSheets.data.values.flat();
    let columns = 1;
    for (let i = 0; i < dateArr.length; i++) {
      if (
        new Date().getMonth() + 1 + "/" + new Date().getDate() ===
        dateArr[i]
      ) {
        columns = columns + i;
        break;
      }
    }
    //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    let dataColumn = await gsapi.spreadsheets.values.get({
      spreadsheetId: idSheets,
      range: `${listSheets[0]}!R3C${columns}:R3C${columns + 30}`,
    });
    let dateList = dataColumn.data.values.flat();
    let currentDay = dateList[0];

    //  –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–π-–ª–∏—Å—Ç
    let priceListArr = await gsapi.spreadsheets.values.get({
      spreadsheetId: idSheets,
      range: `${listSettings[1]}!B2:B`,
    });
    let priceList = priceListArr.data.values.flat();
    let textPrice = "";
    for (i = 0; i < serviceList.length; i++) {
      textPrice = textPrice + `${serviceList[i]} - ` + `${priceList[i]}` + "\n";
    }
    //-------------------------------------------

    //  let idClient;
    //  let nameClient = "";
    //  let indexMaster = "";
    //  let indexDate = "";
    //  let indexTime = "";
    //  let indexColumn = "";
    //  let indexRow = "";
    //  let indexService = "";
    let startBot = ["—Å—Ç–∞—Ä—Ç", "–∑–∞–ø–∏—Å—å", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", "1"];
    let anotherMaster = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"];
    let confirmEntry = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å"];
    let anotherService = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É"];
    let anotherDate = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
    let anotherTime = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"];
    let deleteRecord = ["–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"];
    let priceButton = ["–ü—Ä–∞–π—Å –ª–∏—Å—Ç"];
    let serviceChoice = ["–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É"];
    let serviceButton = ["–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É"];
    let pointNameClient = ["–£–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"];
    let clientRecord = ["–ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"];
    let confirmRecordAdmin = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞"];
    let recordNewButton = ["–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"];
    let blackListCommand = ["777"];
    Array.prototype.push.apply(serviceList, priceButton);
    let deleteValues = {
      values: [""],
    };
    let listSheetButton = listSheets.concat(anotherService);
    let dateListButton = anotherMaster.concat(dateList);
    let blackList = [];
    //–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º ----------------
    removeChoiceAdmin.enter(async (chose) => {
      metaData = await gsapi.spreadsheets.get({
        spreadsheetId: idSheets,
      });
      function sheetnames() {
        let listSheet = new Array();
        let sheets = metaData.data.sheets;
        for (let i = 2; i < sheets.length; i++)
          listSheet.push(metaData.data.sheets[i].properties.title);
        return listSheet;
      }
      let listSheets = sheetnames();
      // let checkMessage = chose.message.text;

      await chose.reply(
        "–í—ã–±–µ—Ä–µ—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
        Markup.keyboard(listSheets).oneTime().resize()
      );

      removeChoiceAdmin.on("message", async (chose) => {
        let checkMessage = chose.update.message.text;
        let buttonDelete = ["–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"];

        if (listSheets.includes(checkMessage)) {
          indexMaster = chose.update.message.text;
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
          dataSheets = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!2:2`,
          });
          dateArr = dataSheets.data.values.flat();
          let columns = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (
              new Date().getMonth() + 1 + "/" + new Date().getDate() ===
              dateArr[i]
            ) {
              columns = columns + i;
              break;
            }
          }
          //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
          dataColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!R3C${columns}:R3C${columns + 30}`,
          });
          dateList = dataColumn.data.values.flat();
          currentDay = dateList[0];
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n" +
              "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (anotherMaster.includes(checkMessage)) {
          chose.reply(
            "–í—ã–±–µ—Ä–µ—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
            Markup.keyboard(listSheets).oneTime().resize()
          );
        } else if (anotherDate.includes(checkMessage)) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
          dataSheets = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!2:2`,
          });
          dateArr = dataSheets.data.values.flat();
          let columns = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (
              new Date().getMonth() + 1 + "/" + new Date().getDate() ===
              dateArr[i]
            ) {
              columns = columns + i;
              break;
            }
          }
          //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
          dataColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!R3C${columns}:R3C${columns + 30}`,
          });
          dateList = dataColumn.data.values.flat();
          currentDay = dateList[0];
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n" +
              "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (currentDay.includes(checkMessage)) {
          //  console.log("–Ø –≤ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ");
          indexDate = chose.update.message.text;
          let timeCurrent = new Date().toString();
          let dateCheck = timeCurrent[timeCurrent.length - 46];
          //console.log(timeCurrent[timeCurrent.length - 46]);
          if (dateCheck === "0") {
            dateCheck = Number(timeCurrent[timeCurrent.length - 45]);
          } else {
            dateCheck = Number(
              timeCurrent[timeCurrent.length - 46] +
                timeCurrent[timeCurrent.length - 45]
            );
          }
          let timeSheets = numberRecordsArr.data.values.flat();
          let time = "";
          let row = 0;
          for (i = 0; i < timeSheets.length; i++) {
            if (timeSheets[i][0] === "1") {
              time = timeSheets[i][0] + timeSheets[i][1];
              // console.log(Number(time));
              row = row + 1;
            } else {
              time = timeSheets[i][0];
              // console.log(Number(time));
              row = row + 1;
            }

            if (Number(time) === dateCheck) {
              // console.log(row);
              break;
            }
          }
          console.log(row);
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;
          //console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });
          //console.log(timeColumn);
          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = row + 1; i < numberRecords + 4; i++) {
            if (timeColumn.data.values[i] == "") {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: " +
              `${indexDate}` +
              "\n–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å?",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (dateList.includes(checkMessage)) {
          console.log("–Ø —Ç—É—Ç");
          indexDate = chose.update.message.text;
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;
          console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 3
            }C${column}`,
          });
          //  console.log(timeColumn.data.values.flat());
          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords; i++) {
            if (timeColumn.data.values[i] == "") {
            } else {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: " +
              `${indexDate}` +
              "\n–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å?",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (anotherTime.includes(checkMessage)) {
          //console.log("–Ø —Ç—É—Ç");
          //indexDate = chose.update.message.text;
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          //console.log(column);
          indexColumn = column;

          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 3
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords; i++) {
            if (timeColumn.data.values[i] == "") {
            } else {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: " +
              `${indexDate}` +
              "\n–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å?",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (timeArray.includes(checkMessage)) {
          indexTime = chose.update.message.text;
          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤—Ä–µ–º–µ–Ω–∏
          let rowTime = 4;
          for (i = 0; i < timeArray.length; i++) {
            if (indexTime == timeArray[i]) {
              rowTime = rowTime + i;
              indexRow = rowTime;
              break;
            }
          }
          let buttonTime = ["–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"];

          chose.telegram.sendMessage(
            chose.chat.id,
            "–ó–∞–ø–∏—Å—å, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: \n–ú–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
              `${indexDate}` +
              "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
              `${indexTime}`,
            Markup.keyboard(buttonTime).oneTime().resize()
          );
        } else if (buttonDelete.includes(checkMessage)) {
          let RecordDelete = {
            values: [""],
          };
          const updateOptions = {
            spreadsheetId: idSheets,
            range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
            valueInputOption: "USER_ENTERED",
            resource: { values: RecordDelete },
          };
          await gsapi.spreadsheets.values.update(updateOptions);

          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
          adminChatIdArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!E1:E`,
          });
          let adminMessage = adminChatIdArr.data.values.flat();
          for (let m = 1; m < adminMessage.length; m++) {
            chose.telegram.sendMessage(
              adminMessage[m],
              "–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
                `${indexMaster}` +
                "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                `${indexDate}` +
                "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                `${indexTime}`,
              Markup.keyboard(adminMenu).oneTime().resize()
            );
          }
          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
          let masterNameArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!G1:G`,
          });
          let masterName = masterNameArr.data.values.flat();
          for (let m = 1; m < masterName.length; m++) {
            if (`${masterName[m]}` == `${indexMaster}`) {
              let masterIdArr = await gsapi.spreadsheets.values.get({
                spreadsheetId: idSheets,
                range: `${listSettings[0]}!F1:F`,
              });
              let masterId = masterIdArr.data.values.flat()[m];
              chose.telegram.sendMessage(
                masterId,
                "–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: " +
                  "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                  `${indexDate}` +
                  "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                  `${indexTime}`
              );
              break;
            }
          }
          return chose.scene.leave();
        } else {
          return;
        }
      });
    });

    //–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ (–∫–æ–º–∞–Ω–¥–∞ /start)
    startScene.enter(async (ctx) => {
      // let idClient;
      // let nameClient = "";
      // let indexMaster = "";
      // let indexDate = "";
      // let indexTime = "";
      // let indexColumn = "";
      // let indexRow = "";
      // let indexService = "";
      nameClient = ctx.chat.first_name;
      idClient = ctx.chat.id;
      let check = ctx.chat.id.toString();
      let checkList = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSettings[0]}!D1:D`,
      });
      blackList = checkList.data.values.flat();

      if (blackList.includes(check)) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –±–∞–∑–µ
      numberClientArr = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSettings[0]}!A1:A`,
      });
      numberClient = numberClientArr.data.values.length;

      if (numberClientArr.data.values.flat().includes(`${idClient}`)) {
        ctx.reply("–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤–∞—Å " + `${nameClient}`) + ". ";
        metaData = await gsapi.spreadsheets.get({
          spreadsheetId: idSheets,
        });
        //–ù–∞—à–∏ —É—Å–ª—É–≥–∏
        serviceListArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSettings[1]}!A2:A`,
        });
        serviceList = serviceListArr.data.values.flat();
        Array.prototype.push.apply(serviceList, priceButton);
        ctx.reply(
          '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–∑–∞–ø–∏—Å—å" (–ø–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)',
          Markup.keyboard(recordNewButton).oneTime().resize()
        );
        return ctx.scene.leave();
      } else {
        await ctx.reply(
          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å " + `${nameClient}` + ". –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        );
        startScene.on("message", async (ctx) => {
          let indexPhone = ctx.update.message.text;
          let reg =
            /^(\+)?((\d{2,3}) ?\d|\d)(([ -]?\d)|( ?(\d{2,3}) ?)){5,12}\d$/;
          if (
            reg.test(indexPhone) &&
            indexPhone.length <= 11 &&
            indexPhone.length >= 10
          ) {
            //–ù–∞—à–∏ —É—Å–ª—É–≥–∏
            serviceListArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSettings[1]}!A2:A`,
            });
            serviceList = serviceListArr.data.values.flat();
            Array.prototype.push.apply(serviceList, priceButton);
            idClient = ctx.chat.id;
            nameClient = ctx.chat.first_name;
            ctx.reply(
              '–û—Ç–ª–∏—á–Ω–æ. –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–∑–∞–ø–∏—Å—å" (–ø–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)',
              Markup.keyboard(recordNewButton).oneTime().resize()
            );
            let dateRecord = {
              values: [`${idClient}`, `${nameClient}`, `${indexPhone}`],
            };
            const updateOptions = {
              spreadsheetId: idSheets,
              range: `${listSettings[0]}!R${numberClient + 1}C1:R${
                numberClient + 1
              }C3`,
              valueInputOption: "USER_ENTERED",
              resource: { values: dateRecord },
            };
            await gsapi.spreadsheets.values.update(updateOptions);
            return ctx.scene.leave();
          } else {
            ctx.reply(
              "–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            );
          }
        });
      }
    });
    //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ -------------------
    black.enter(async (chose) => {
      //–ü—Ä–æ–≤–µ—Ä—è–º –Ω–∞ –∞–¥–º–∏–Ω—Å—Ç–≤–æ
      let checkId = chose.chat.id.toString();
      let adminChatIdArr = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSettings[0]}!E1:E`,
      });
      if (!adminChatIdArr.data.values.flat().includes(checkId)) {
        chose.reply(
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ "–∑–∞–ø–∏—Å—å". –ü–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫'
        );
        return false;
      }

      checkList = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSettings[0]}!D1:D`,
      });
      numberClient = checkList.data.values.length;
      console.log(checkList.data.values.length);
      await bot.telegram.sendMessage(
        chose.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ id, –±–ª–æ–∫–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–±–æ –≤ –≤–∞—à–∏—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏—è—Ö, –ª–∏–±–æ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ "
      );
      black.on("message", async (chose) => {
        let indexIDBlack = chose.update.message.text;
        let regID = /^[1-9]+[0-9]*$/;
        if (regID.test(indexIDBlack)) {
          checkList = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!D1:D`,
          });
          let numberRow = checkList.data.values.length;
          console.log(checkList.data.values.length);
          let RecordBlackId = {
            values: [`${indexIDBlack}`],
          };
          const updateOptions = {
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!D${numberRow + 1}:D${numberRow + 1}`,
            valueInputOption: "USER_ENTERED",
            resource: { values: RecordBlackId },
          };
          await gsapi.spreadsheets.values.update(updateOptions);
          chose.reply("ID –≤–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É");
          return chose.scene.leave();
        } else {
          await chose.reply(
            "–ù–æ–º–µ—Ä ID –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
          );
        }
      });
    });
    //End —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    //  –¢–µ–ª–æ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ (—Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º)
    recordClient.enter(async (chose) => {
      metaData = await gsapi.spreadsheets.get({
        spreadsheetId: idSheets,
      });
      sheets = metaData.data.sheets;
      let checkMessage = chose.message.text;
      nameClient = chose.chat.first_name;
      let check = chose.chat.id.toString();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
      checkList = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSettings[0]}!D1:D`,
      });
      blackList = checkList.data.values.flat();

      if (blackList.includes(check)) {
        return false;
      } else if (recordNewButton.includes(checkMessage)) {
        serviceListArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSettings[1]}!A2:A`,
        });
        serviceList = serviceListArr.data.values.flat();
        Array.prototype.push.apply(serviceList, priceButton);
        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      } else if (startBot.includes(checkMessage)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å " + `${nameClient}` + ". "
        );
        //–ù–∞—à–∏ —É—Å–ª—É–≥–∏
        serviceListArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSettings[1]}!A2:A`,
        });
        serviceList = serviceListArr.data.values.flat();
        Array.prototype.push.apply(serviceList, priceButton);
        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      }

      recordClient.on("message", async (chose) => {
        checkMessage = chose.message.text;
        if (blackList.includes(check)) {
          return false;
        } else if (recordNewButton.includes(checkMessage)) {
          serviceListArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[1]}!A2:A`,
          });
          serviceList = serviceListArr.data.values.flat();
          Array.prototype.push.apply(serviceList, priceButton);
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å",
            Markup.keyboard(serviceList).oneTime().resize()
          );
        } else if (startBot.includes(checkMessage)) {
          chose.telegram.sendMessage(
            chose.chat.id,
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å " + `${nameClient}` + ". "
          );
          //–ù–∞—à–∏ —É—Å–ª—É–≥–∏
          serviceListArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[1]}!A2:A`,
          });
          serviceList = serviceListArr.data.values.flat();
          Array.prototype.push.apply(serviceList, priceButton);
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å",
            Markup.keyboard(serviceList).oneTime().resize()
          );
        } else if (priceButton.includes(checkMessage)) {
          serviceListArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[1]}!A2:A`,
          });
          serviceList = serviceListArr.data.values.flat();
          priceListArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[1]}!B2:B`,
          });
          priceList = priceListArr.data.values.flat();
          textPrice = "";
          for (i = 0; i < serviceList.length; i++) {
            textPrice =
              textPrice + `${serviceList[i]} - ` + `${priceList[i]}` + "\n";
          }
          chose.telegram.sendMessage(
            chose.chat.id,
            textPrice,
            Markup.keyboard(serviceButton).oneTime().resize()
          );
        } else if (serviceChoice.includes(checkMessage)) {
          let serviceListArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[1]}!A2:A`,
          });
          let serviceList = serviceListArr.data.values.flat();
          Array.prototype.push.apply(serviceList, priceButton);
          nameClient = chose.chat.first_name;
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å",
            Markup.keyboard(serviceList).oneTime().resize()
          );
        } else if (serviceList.includes(checkMessage)) {
          function sheetnames() {
            let listSheet = new Array();
            let sheets = metaData.data.sheets;
            for (let i = 2; i < sheets.length; i++)
              listSheet.push(metaData.data.sheets[i].properties.title);
            return listSheet;
          }
          const listSheets = sheetnames();
          listSheetButton = listSheets.concat(anotherService);
          indexService = chose.update.message.text;
          chose.telegram.sendMessage(
            chose.chat.id,
            "–ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å",
            Markup.keyboard(listSheetButton).oneTime().resize()
          );
        } else if (anotherMaster.includes(checkMessage)) {
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            Markup.keyboard(listSheetButton).oneTime().resize()
          );
        } else if (listSheets.includes(checkMessage)) {
          indexMaster = chose.update.message.text;
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
          dataSheets = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!2:2`,
          });
          dateArr = dataSheets.data.values.flat();
          let columns = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (
              new Date().getMonth() + 1 + "/" + new Date().getDate() ===
              dateArr[i]
            ) {
              columns = columns + i;
              break;
            }
          }
          //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
          dataColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!R3C${columns}:R3C${columns + 30}`,
          });
          dateList = dataColumn.data.values.flat();
          currentDay = dateList[0];
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: " +
              `${indexMaster}` +
              "\n" +
              "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (anotherDate.includes(checkMessage)) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
          dataSheets = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!2:2`,
          });
          dateArr = dataSheets.data.values.flat();
          let columns = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (
              new Date().getMonth() + 1 + "/" + new Date().getDate() ===
              dateArr[i]
            ) {
              columns = columns + i;
              break;
            }
          }
          //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
          dataColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheets[0]}!R3C${columns}:R3C${columns + 30}`,
          });
          dateList = dataColumn.data.values.flat();
          currentDay = dateList[0];
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: " +
              `${indexMaster}` +
              "\n" +
              "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (currentDay.includes(checkMessage)) {
          console.log("–Ø –≤ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ");
          indexDate = chose.update.message.text;
          let timeCurrent = new Date().toString();
          let dateCheck = timeCurrent[timeCurrent.length - 46];
          //console.log(timeCurrent[timeCurrent.length - 46]);
          if (dateCheck === "0") {
            dateCheck = Number(timeCurrent[timeCurrent.length - 45]);
          } else {
            dateCheck = Number(
              timeCurrent[timeCurrent.length - 46] +
                timeCurrent[timeCurrent.length - 45]
            );
          }
          //console.log(dateCheck);
          //console.log(timeCurrent);
          let timeSheets = numberRecordsArr.data.values.flat();
          let time = "";
          let row = 0;
          for (i = 0; i < timeSheets.length; i++) {
            if (timeSheets[i][0] === "1") {
              time = timeSheets[i][0] + timeSheets[i][1];
              // console.log(Number(time));
              row = row + 1;
            } else {
              time = timeSheets[i][0];
              // console.log(Number(time));
              row = row + 1;
            }

            if (Number(time) === dateCheck) {
              // console.log(row);
              break;
            }
          }
          console.log(row);
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;
          //console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });
          //console.log(timeColumn);
          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = row + 1; i < numberRecords + 4; i++) {
            if (timeColumn.data.values[i] == "") {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              ". \n –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (dateList.includes(checkMessage)) {
          console.log("–Ø —Ç—É—Ç");
          indexDate = chose.update.message.text;
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;
          //console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords + 4; i++) {
            if (timeColumn.data.values[i] == "") {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              ". \n –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (anotherTime.includes(checkMessage)) {
          //console.log("–Ø —Ç—É—Ç");
          //indexDate = chose.update.message.text;
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          //console.log(column);
          indexColumn = column;

          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords + 4; i++) {
            if (timeColumn.data.values[i] == "") {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              ". \n –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è.",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (timeArray.includes(checkMessage)) {
          indexTime = chose.update.message.text;

          let rowTime = 4;
          for (i = 0; i < timeArray.length; i++) {
            if (indexTime == timeArray[i]) {
              rowTime = rowTime + i;
              indexRow = rowTime;
              break;
            }
          }
          let buttonTime = [
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å",
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ",
            "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è",
          ];

          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: \n–ú–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n–£—Å–ª—É–≥–∞: " +
              `${indexService}` +
              "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
              `${indexDate}` +
              "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
              `${indexTime}`,
            Markup.keyboard(buttonTime).oneTime().resize()
          );
        } else if (confirmEntry.includes(checkMessage)) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç
          let checkFreeArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
          });
          let checkFree = checkFreeArr.data.values;
          if (checkFree === undefined) {
            // –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
            let idListArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSettings[0]}!A2:A`,
            });
            let idList = idListArr.data.values.flat();
            let checkIdClient;
            // let scoreId = 0;
            for (i = 0; i < idList.length; i++) {
              checkIdClient = idList[i];
              if (checkIdClient == chose.chat.id) {
                scoreId = i;
                break;
              }
            }

            let indexPhoneArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSettings[0]}!R${scoreId + 2}C3:R${scoreId + 2}C3`,
            });
            indexPhone = indexPhoneArr.data.values.flat();

            let dateRecord = {
              values: [
                "–ö–ª–∏–µ–Ω—Ç: " +
                  `${nameClient}` +
                  "\n–£—Å–ª—É–≥–∞: " +
                  `${indexService}` +
                  "\n–¢–µ–ª–µ—Ñ–æ–Ω: " +
                  `${indexPhone}`,
              ],
            };
            const updateOptions = {
              spreadsheetId: idSheets,
              range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
              valueInputOption: "USER_ENTERED",
              resource: { values: dateRecord },
            };
            await gsapi.spreadsheets.values.update(updateOptions);

            chose.telegram.sendMessage(
              chose.chat.id,
              "–û—Ç–ª–∏—á–Ω–æ. –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã:\n–ú–∞—Å—Ç–µ—Ä: " +
                `${indexMaster}` +
                "\n–£—Å–ª—É–≥–∞: " +
                `${indexService}` +
                "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                `${indexDate}` +
                "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
                `${indexTime}`,
              Markup.keyboard(deleteRecord).oneTime().resize()
            );
            //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            adminChatIdArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSettings[0]}!E1:E`,
            });
            let adminMessage = adminChatIdArr.data.values.flat();
            for (let m = 1; m < adminMessage.length; m++) {
              chose.telegram.sendMessage(
                adminMessage[m],
                "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
                  `${indexMaster}` +
                  "\n–ö–ª–∏–µ–Ω—Ç: " +
                  `${nameClient}` +
                  "\n–£—Å–ª—É–≥–∞: " +
                  `${indexService}` +
                  "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                  `${indexDate}` +
                  "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
                  `${indexTime}` +
                  "\n–¢–µ–ª–µ—Ñ–æ–Ω: " +
                  `${indexPhone}` +
                  "\nID: " +
                  `${chose.chat.id}`
              );
            }
            //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
            let masterNameArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSettings[0]}!G1:G`,
            });
            let masterName = masterNameArr.data.values.flat();
            for (let m = 1; m < masterName.length; m++) {
              if (`${masterName[m]}` == `${indexMaster}`) {
                let masterIdArr = await gsapi.spreadsheets.values.get({
                  spreadsheetId: idSheets,
                  range: `${listSettings[0]}!F1:F`,
                });
                let masterId = masterIdArr.data.values.flat()[m];
                chose.telegram.sendMessage(
                  masterId,
                  "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: " +
                    "\n–ö–ª–∏–µ–Ω—Ç: " +
                    `${nameClient}` +
                    "\n–£—Å–ª—É–≥–∞: " +
                    `${indexService}` +
                    "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                    `${indexDate}` +
                    "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
                    `${indexTime}`
                );
                break;
              }
            }
            //–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ —á–∞—Å
            let mmsHours = 3600000;
            let timeZone = 8;
            let dateRec = indexDate[indexDate.length - 5];
            if (dateRec === "0") {
              dateRec = indexDate[indexDate.length - 4];
            } else {
              dateRec =
                indexDate[indexDate.length - 5] +
                indexDate[indexDate.length - 4];
            }
            let monthRec = indexDate[indexDate.length - 2];
            if (monthRec === "0") {
              monthRec = indexDate[indexDate.length - 1] - 1;
            } else {
              monthRec =
                indexDate[indexDate.length - 2] +
                indexDate[indexDate.length - 1] -
                1;
            }

            let minutesRec =
              indexTime[indexTime.length - 2] + indexTime[indexTime.length - 1];
            if (minutesRec === "0") {
              minutesRec = 0;
            }
            let hoursRec = indexTime[indexTime.length - 5];
            if (hoursRec === undefined) {
              hoursRec = Number(indexTime[indexTime.length - 4]) + timeZone;
              //  console.log("ok");
            } else {
              hoursRec =
                Number(
                  indexTime[indexTime.length - 5] +
                    indexTime[indexTime.length - 4]
                ) + timeZone;
            }

            let currentYear = new Date().getFullYear();
            let currentDate = Date.now() + mmsHours * (timeZone - 1);
            let dateRecordsMM = new Date(
              currentYear,
              monthRec,
              dateRec,
              hoursRec,
              minutesRec
            );
            let intervalTime = dateRecordsMM - currentDate - mmsHours * 2;
            //console.log(intervalTime);
            if (intervalTime > 0) {
              setTimeout(() => {
                chose.telegram.sendMessage(
                  chose.chat.id,
                  "–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤–∞—Å " +
                    `${nameClient}` +
                    ". –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–∞–º, —á—Ç–æ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–Ω–¥—è:\n–ú–∞—Å—Ç–µ—Ä: " +
                    `${indexMaster}` +
                    "\n–£—Å–ª—É–≥–∞: " +
                    `${indexService}` +
                    "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                    `${indexDate}` +
                    "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
                    `${indexTime}`,
                  Markup.keyboard(deleteRecord).oneTime().resize()
                );
              }, intervalTime);
            }
            return chose.scene.leave();
          } else {
            chose.telegram.sendMessage(
              chose.chat.id,
              "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏. –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
                `${indexDate}` +
                ". \n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è",
              Markup.keyboard(anotherTime).oneTime().resize()
            );
          }
        } else {
          chose.telegram.sendMessage(
            chose.chat.id,
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ "–∑–∞–ø–∏—Å—å". –ü–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫'
          );
        }
      });
    });
    //-----------–ö–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
    // ------------ –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º------------------------
    bot.on("message", async (chose) => {
      let checkMessage = chose.message.text;

      metaData = await gsapi.spreadsheets.get({
        spreadsheetId: idSheets,
      });
      //–ù–∞—à–∏ —É—Å–ª—É–≥–∏
      serviceListArr = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSettings[1]}!A2:A`,
      });
      serviceList = serviceListArr.data.values.flat();

      let changeService = ["–ó–∞–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É"];

      if (clientRecord.includes(checkMessage)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      } else if (serviceList.includes(checkMessage)) {
        function sheetnames() {
          let listSheet = new Array();
          let sheets = metaData.data.sheets;
          for (let i = 2; i < sheets.length; i++)
            listSheet.push(metaData.data.sheets[i].properties.title);
          return listSheet;
        }
        const listSheets = sheetnames();
        listSheetButton = listSheets.concat(changeService);
        indexService = chose.update.message.text;
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
          Markup.keyboard(listSheetButton).oneTime().resize()
        );
      } else if (changeService.includes(checkMessage)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      } else if (anotherMaster.includes(checkMessage)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
          Markup.keyboard(listSheetButton).oneTime().resize()
        );
      } else if (listSheets.includes(checkMessage)) {
        indexMaster = chose.update.message.text;
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
        dataSheets = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSheets[0]}!2:2`,
        });
        dateArr = dataSheets.data.values.flat();
        let columns = 1;
        for (let i = 0; i < dateArr.length; i++) {
          if (
            new Date().getMonth() + 1 + "/" + new Date().getDate() ===
            dateArr[i]
          ) {
            columns = columns + i;
            break;
          }
        }
        //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        dataColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSheets[0]}!R3C${columns}:R3C${columns + 30}`,
        });
        dateList = dataColumn.data.values.flat();
        currentDay = dateList[0];
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –º–∞—Å—Ç–µ—Ä–∞: " +
            `${indexMaster}` +
            "\n" +
            "–£—Ç–æ—á–Ω–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å",
          Markup.keyboard(dateListButton).oneTime().resize()
        );
      } else if (anotherDate.includes(checkMessage)) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
        dataSheets = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSheets[0]}!2:2`,
        });
        dateArr = dataSheets.data.values.flat();
        let columns = 1;
        for (let i = 0; i < dateArr.length; i++) {
          if (
            new Date().getMonth() + 1 + "/" + new Date().getDate() ===
            dateArr[i]
          ) {
            columns = columns + i;
            break;
          }
        }
        //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        dataColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSheets[0]}!R3C${columns}:R3C${columns + 30}`,
        });
        dateList = dataColumn.data.values.flat();
        currentDay = dateList[0];
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –º–∞—Å—Ç–µ—Ä–∞: " +
            `${indexMaster}` +
            "\n" +
            "–ü–æ–¥–±–∏—Ä–∏—Ç–µ –¥–ª—è –Ω–µ–≥–æ –¥—Ä—É–≥—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É",
          Markup.keyboard(dateListButton).oneTime().resize()
        );
      } else if (currentDay.includes(checkMessage)) {
        //  console.log("–Ø –≤ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ");
        indexDate = chose.update.message.text;
        let timeCurrent = new Date().toString();
        let dateCheck = timeCurrent[timeCurrent.length - 46];
        //console.log(timeCurrent[timeCurrent.length - 46]);
        if (dateCheck === "0") {
          dateCheck = Number(timeCurrent[timeCurrent.length - 45]);
        } else {
          dateCheck = Number(
            timeCurrent[timeCurrent.length - 46] +
              timeCurrent[timeCurrent.length - 45]
          );
        }
        //console.log(dateCheck);
        //console.log(timeCurrent);
        let timeSheets = numberRecordsArr.data.values.flat();
        let time = "";
        let row = 0;
        for (i = 0; i < timeSheets.length; i++) {
          if (timeSheets[i][0] === "1") {
            time = timeSheets[i][0] + timeSheets[i][1];
            // console.log(Number(time));
            row = row + 1;
          } else {
            time = timeSheets[i][0];
            // console.log(Number(time));
            row = row + 1;
          }

          if (Number(time) === dateCheck) {
            // console.log(row);
            break;
          }
        }
        console.log(row);
        let column = 1;
        for (let i = 0; i < dateArr.length; i++) {
          if (indexDate === dateSheets[i]) {
            column = column + i;
            break;
          }
        }
        // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        indexColumn = column;
        //console.log(column);
        let timeColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R4C${column}:R${numberRecords + 4}C${column}`,
        });
        //console.log(timeColumn);
        //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        let timeArr = [];
        for (i = row + 1; i < numberRecords + 4; i++) {
          if (timeColumn.data.values[i] == "") {
            let itemss = timeArray[i];
            timeArr = timeArr.concat(itemss);
          }
        }
        //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
        let items = timeArr;
        let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
        Array.prototype.push.apply(items, itemsDop);
        //let dateList = dataColumn.data.values.flat();
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: " +
            `${indexDate}` +
            "\n–£—Ç–æ—á–Ω–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å",
          Markup.keyboard(items).oneTime().resize()
        );
        //});
      } else if (dateList.includes(checkMessage)) {
        console.log("–Ø —Ç—É—Ç");
        indexDate = chose.update.message.text;
        let column = 1;
        for (let i = 0; i < dateArr.length; i++) {
          if (indexDate === dateSheets[i]) {
            column = column + i;
            break;
          }
        }
        // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        indexColumn = column;
        console.log(column);
        let timeColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R4C${column}:R${numberRecords + 4}C${column}`,
        });

        //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        let timeArr = [];
        for (i = 0; i < numberRecords + 4; i++) {
          if (timeColumn.data.values[i] == "") {
            let itemss = timeArray[i];
            timeArr = timeArr.concat(itemss);
          }
        }
        //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
        let items = timeArr;
        let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
        Array.prototype.push.apply(items, itemsDop);
        //let dateList = dataColumn.data.values.flat();
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: " +
            `${indexDate}` +
            ". \n–£—Ç–æ—á–Ω–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å",
          Markup.keyboard(items).oneTime().resize()
        );
        //});
      } else if (anotherTime.includes(checkMessage)) {
        //console.log("–Ø —Ç—É—Ç");
        //indexDate = chose.update.message.text;
        let column = 1;
        for (let i = 0; i < dateArr.length; i++) {
          if (indexDate === dateSheets[i]) {
            column = column + i;
            break;
          }
        }
        // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        //console.log(column);
        indexColumn = column;

        let timeColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R4C${column}:R${numberRecords + 4}C${column}`,
        });

        //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        let timeArr = [];
        for (i = 0; i < numberRecords + 4; i++) {
          if (timeColumn.data.values[i] == "") {
            let itemss = timeArray[i];
            timeArr = timeArr.concat(itemss);
          }
        }
        //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
        let items = timeArr;
        let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
        Array.prototype.push.apply(items, itemsDop);
        //let dateList = dataColumn.data.values.flat();
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: " +
            `${indexDate}` +
            ". \n–ù–∞–π–¥–∏—Ç–µ –¥–ª—è –Ω–µ–≥–æ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è.",
          Markup.keyboard(items).oneTime().resize()
        );
        //});
      } else if (timeArray.includes(checkMessage)) {
        indexTime = chose.update.message.text;

        let rowTime = 4;
        for (i = 0; i < timeArray.length; i++) {
          if (indexTime == timeArray[i]) {
            rowTime = rowTime + i;
            indexRow = rowTime;
            break;
          }
        }
        //  let pointNameClient = ["–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"];
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª: \n–ú–∞—Å—Ç–µ—Ä: " +
            `${indexMaster}` +
            "\n–£—Å–ª—É–≥–∞: " +
            `${indexService}` +
            "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
            `${indexDate}` +
            "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
            `${indexTime}` +
            '\n(–£—Ç–æ—á–Ω—è–µ–º  –∫–ª–∏–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞". –ò–º—è –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É )',
          Markup.keyboard(pointNameClient).oneTime().resize()
        );
        return chose.scene.leave();
      } else if (confirmRecordAdmin.includes(checkMessage)) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç
        let checkFreeArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
        });
        let checkFree = checkFreeArr.data.values;
        if (checkFree === undefined) {
          // –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
          let idListArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!A2:A`,
          });
          let idList = idListArr.data.values.flat();
          let checkIdClient;
          // let scoreId = 0;
          for (i = 0; i < idList.length; i++) {
            checkIdClient = idList[i];
            if (checkIdClient == chose.chat.id) {
              scoreId = i;
              break;
            }
          }

          let indexPhoneArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!R${scoreId + 2}C3:R${scoreId + 2}C3`,
          });
          indexPhone = indexPhoneArr.data.values.flat();
          let dateRecord = {
            values: [
              "–ö–ª–∏–µ–Ω—Ç: " +
                `${nameClient}` +
                "\n–£—Å–ª—É–≥–∞: " +
                `${indexService}` +
                "\n–¢–µ–ª–µ—Ñ–æ–Ω: " +
                `${indexPhone}`,
            ],
          };
          const updateOptions = {
            spreadsheetId: idSheets,
            range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
            valueInputOption: "USER_ENTERED",
            resource: { values: dateRecord },
          };
          await gsapi.spreadsheets.values.update(updateOptions);

          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
          adminChatIdArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!E1:E`,
          });
          let adminMessage = adminChatIdArr.data.values.flat();
          for (let m = 1; m < adminMessage.length; m++) {
            chose.telegram.sendMessage(
              adminMessage[m],
              "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
                `${indexMaster}` +
                "\n–ö–ª–∏–µ–Ω—Ç: " +
                `${nameClient}` +
                "\n–£—Å–ª—É–≥–∞: " +
                `${indexService}` +
                "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                `${indexDate}` +
                "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                `${indexTime}` +
                "\n–¢–µ–ª–µ—Ñ–æ–Ω: " +
                `${indexPhone}` +
                "\nID: " +
                `${chose.chat.id}`,
              Markup.keyboard(adminMenu).oneTime().resize()
            );
          }
          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
          let masterNameArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSettings[0]}!G1:G`,
          });
          let masterName = masterNameArr.data.values.flat();
          for (let m = 1; m < masterName.length; m++) {
            if (`${masterName[m]}` == `${indexMaster}`) {
              let masterIdArr = await gsapi.spreadsheets.values.get({
                spreadsheetId: idSheets,
                range: `${listSettings[0]}!F1:F`,
              });
              let masterId = masterIdArr.data.values.flat()[m];
              chose.telegram.sendMessage(
                masterId,
                "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: " +
                  "\n–ö–ª–∏–µ–Ω—Ç: " +
                  `${nameClient}` +
                  "\n–£—Å–ª—É–≥–∞: " +
                  `${indexService}` +
                  "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                  `${indexDate}` +
                  "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                  `${indexTime}`
              );
              break;
            }
          }
          return chose.scene.leave();
        } else {
          chose.telegram.sendMessage(
            chose.chat.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏. –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              ". \n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è",
            Markup.keyboard(anotherTime).oneTime().resize()
          );
        }
      } else {
        return;
      }
      // });
    });
    //  –∑–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    nameClientSce.enter(async (chose) => {
      await chose.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º");
      nameClientSce.on("message", (chose) => {
        let checkName = chose.message.text;
        let checkAnswer = /^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9]+$/;
        console.log(checkName);

        if (checkAnswer.test(checkName)) {
          nameClient = chose.message.text;
          let buttonTime = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞"];
          chose.reply(
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞",
            Markup.keyboard(buttonTime).oneTime().resize()
          );
          return chose.scene.leave();
        } else {
          chose.telegram.sendMessage(chose.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è");
        }
      });
    });
    //--------------------------------- –∑–¥–µ—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –∫–ª–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º

    //  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–º
    removeChoice.enter(async (chose) => {
      let removeConfirmChoice = ["–î–∞, —É–¥–∞–ª–∏—Ç—å", "–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª—è—Ç—å"];
      // let removeConfirm = ["–î–∞, —É–¥–∞–ª–∏—Ç—å"];
      // let noremoveConfirm = ["–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª—è—Ç—å"];
      chose.telegram.sendMessage(
        chose.chat.id,
        '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞, —É–¥–∞–ª–∏—Ç—å". –ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ –æ—à–∏–±–æ—á–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª—è—Ç—å"',
        Markup.keyboard(removeConfirmChoice).oneTime().resize()
      );
    });
    removeChoice.on("message", async (chose) => {
      let answer = chose.update.message.text;
      let removeConfirm = ["–î–∞, —É–¥–∞–ª–∏—Ç—å"];
      let noremoveConfirm = ["–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª—è—Ç—å"];
      if (removeConfirm.includes(answer)) {
        const updateOptionsDelete = {
          spreadsheetId: idSheets,
          range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
          valueInputOption: "USER_ENTERED",
          resource: { values: deleteValues },
        };
        await gsapi.spreadsheets.values.update(updateOptionsDelete);

        chose.telegram.sendMessage(
          chose.chat.id,
          "–ú—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∞–π—Ç–µ —É—Å–ª—É–≥—É: ",
          Markup.keyboard(serviceList).oneTime().resize()
        );

        //let adminChatId = "601081115";
        adminChatIdArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSettings[0]}!E1:E`,
        });
        let adminMessage = adminChatIdArr.data.values.flat();
        for (let m = 1; m < adminMessage.length; m++) {
          chose.telegram.sendMessage(
            adminMessage[m],
            "–ë—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n–ö–ª–∏–µ–Ω—Ç: " +
              `${nameClient}` +
              "\n–£—Å–ª—É–≥–∞: " +
              `${indexService}` +
              "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
              `${indexDate}` +
              "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
              `${indexTime}`
          );
        }
        //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        let masterNameArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSettings[0]}!G1:G`,
        });
        masterName = masterNameArr.data.values.flat();
        for (let m = 1; m < masterName.length; m++) {
          if (`${masterName[m]}` == `${indexMaster}`) {
            masterIdArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSettings[0]}!F1:F`,
            });
            masterId = masterIdArr.data.values.flat()[m];
            chose.telegram.sendMessage(
              masterId,
              "–ë—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å: " +
                "\n–ö–ª–∏–µ–Ω—Ç: " +
                `${nameClient}` +
                "\n–£—Å–ª—É–≥–∞: " +
                `${indexService}` +
                "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                `${indexDate}` +
                "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
                `${indexTime}`
            );
            break;
          }
        }
        return chose.scene.leave();
      } else if (noremoveConfirm.includes(answer)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–û—Ç–ª–∏—á–Ω–æ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
          Markup.keyboard(deleteRecord).oneTime().resize()
        );
        return chose.scene.leave();
      }
    });
  } catch (e) {
    console.error(e);
  }
}
